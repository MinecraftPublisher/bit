%prefix "bit_asm"
%value "void*"

%header {
    #include "src/basm_header.h"
}

main <- (_ '##EXPRONLY' _ data) /
    ((_ (comment / macro_call / instruction / define / macro) _)+)

# function-like macro that will be replaced as code at assemble-time
macro <- { char *args[10]; int ptr = 0; } 
    'macro' _ < n:name > _ '(' < (!')' .)* > ')'
    _ <(!'end' (_ . _))*> _ 'end' _ $1
    {
        //# name = $1
        //# args = $2
        //# code = $3
        create_macro_function($1, $3, $2); }

macro_call <- '@' n:name _ '(' < (!')' .)* > ')' { run_macro(*((struct macro_define*)bh_ht_get(macro_functions, n)), $1); }

# constant macro that will be replaced as text at assemble-time
define <- 'define' _ arg_name:name _ ','? _ '{' < (!'}' !'{' .)+ > '}' { bh_ht_set(constants, arg_name, $1); }

name <- ([a-zA-Z][a-zA-Z0-9]*) { if(bh_ht_get(constants, $0) != NULL) $$ = bh_ht_get(constants, $0); else $$ = $0; }

comment <- '#' _ (!'\n' .)* '\n'*

instruction <-
    (
        (('halt' / 'hlt' / 'HALT' / 'HLT') 
            { printf("HLT\n" byte8 "\n"); }) /
        (('mov' / 'move' / 'MOV' / 'MOVE') 
            { printf("MOV\n01\n"); } _ data _ ','? _ addr 
            { printf("    PADDING " "00" "\n"); }) /
        (('jmp' / 'jump' / 'JMP' / 'JUMP') 
            { printf("JMP\n10\n    CONDS\n    "); } 
            _ '(' _ jmpcond { printf("\n"); } _ ')' _ ','? _ addr
            { printf("    PADDING " byte2 byte "00000" "\n"); }) /
        (('math' / 'mth' / 'MATH' / 'MTH') 
            { printf("MATH\n11\n    OP "); } _ (
                (('+' / 'add' / 'ADD' / '0') { printf("ADD 0\n"); }) /
                (('~' / '!' / 'nand' / 'NAND' / '1') { printf("NAND 1\n"); })
            ) _ ','? _ addr _ ','? _ data                                             # MATH SUPPORT DROPPED FOR 3 PARAMETERS
            { printf("    PADDING " "0" "\n"); })
    ) ';'? { printf("\n"); }

# ------------------------------------------- JUMP CONDITIONS -------------------------------------------
jmpcond <- (jmpzero / ('' { printf("0"); })) _ 'or'? _ (jmpless / ('' { printf("0"); })) _ 'or'? _ (jmpmore / ('' { printf("0"); })) _
jmpzero <- ('zero' / '0' / 'iszero' / 'ZERO' / 'ISZERO') { printf("1"); }
jmpless <- ('negative' / 'less' / '-1' / '<' / 'NEGATIVE' / 'LESS') { printf("1"); }
jmpmore <- ('positive' / 'more' / '1' / '>' / 'POSITIVE' / 'MORE') { printf("1"); }

defcall <- ('!' j:name { run_expr(j); })
data <- defcall / addr / consts

addr <- 
    defcall /
    ('r' a:reg_code { print_reg(((char*)a)[0] - 'A'); }) /
    ('m' a:reg_code { printf("    MEMORY ADDRESS IN r%c\n    00 ", ((char*)a)[0]); print_bin(((char*)a)[0] - 'A', 0); printf("\n"); })
reg_code <- [A-P] { $$ = $0; }
consts <- ((('$' a:const) / ('const(' a:const ')')) { printf("    CONSTANT VALUE\n    1 "); print_bin(atoi(a), 1); printf("\n"); })

# 16384
const <- [0-9]* { $$ = $0; }

_ <- ('\n' / ' ' / '\t')*

%%

int main(int argc, string *argv) {
    current_path = argv[0];

    if(argc != 2 || strcmp(argv[1], "nostart")) printf(
            "--------------------------------" "\n"
            "|     BIT ASSEMBLER OUTPUT     |" "\n"
            "| INTENDED TO BE RAN ON BIT VM |" "\n"
            "--------------------------------" "\n\n");
     // create context

    macro_functions = bh_ht_init();
    constants = bh_ht_init();
    
    run_code(NULL);

    return 0;
}